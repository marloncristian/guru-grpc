// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/customer-service.proto

package services

import (
	context "context"
	domain "domain"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CustomerAddResponse struct {
	CustomerId           int64    `protobuf:"varint,1,opt,name=CustomerId,proto3" json:"CustomerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerAddResponse) Reset()         { *m = CustomerAddResponse{} }
func (m *CustomerAddResponse) String() string { return proto.CompactTextString(m) }
func (*CustomerAddResponse) ProtoMessage()    {}
func (*CustomerAddResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f375daa753074f8, []int{0}
}

func (m *CustomerAddResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerAddResponse.Unmarshal(m, b)
}
func (m *CustomerAddResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerAddResponse.Marshal(b, m, deterministic)
}
func (m *CustomerAddResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAddResponse.Merge(m, src)
}
func (m *CustomerAddResponse) XXX_Size() int {
	return xxx_messageInfo_CustomerAddResponse.Size(m)
}
func (m *CustomerAddResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAddResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAddResponse proto.InternalMessageInfo

func (m *CustomerAddResponse) GetCustomerId() int64 {
	if m != nil {
		return m.CustomerId
	}
	return 0
}

func init() {
	proto.RegisterType((*CustomerAddResponse)(nil), "service.CustomerAddResponse")
}

func init() { proto.RegisterFile("services/customer-service.proto", fileDescriptor_3f375daa753074f8) }

var fileDescriptor_3f375daa753074f8 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0x2e, 0x2d, 0x2e, 0xc9, 0xcf, 0x4d, 0x2d, 0xd2, 0x85, 0x8a,
	0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xb1, 0x43, 0xb9, 0x52, 0xa2, 0x29, 0xf9, 0xb9, 0x89,
	0x99, 0x79, 0x70, 0x75, 0x10, 0x79, 0x25, 0x53, 0x2e, 0x61, 0x67, 0xa8, 0x88, 0x63, 0x4a, 0x4a,
	0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x1c, 0x17, 0x17, 0x4c, 0xd8, 0x33, 0x45,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08, 0x49, 0xc4, 0xc8, 0x8b, 0x8b, 0x1f, 0xc6, 0x0b, 0x86,
	0x58, 0x20, 0x64, 0xce, 0xc5, 0x9c, 0x98, 0x92, 0x22, 0x24, 0xa0, 0x07, 0xb1, 0x48, 0x0f, 0x26,
	0x2f, 0x25, 0xa3, 0x07, 0x73, 0x12, 0x16, 0x9b, 0x94, 0x18, 0x9c, 0xb8, 0xa2, 0x38, 0x60, 0xbe,
	0x48, 0x62, 0x03, 0xbb, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x11, 0x4d, 0xd9, 0xd8,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	Add(ctx context.Context, in *domain.Customer, opts ...grpc.CallOption) (*CustomerAddResponse, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Add(ctx context.Context, in *domain.Customer, opts ...grpc.CallOption) (*CustomerAddResponse, error) {
	out := new(CustomerAddResponse)
	err := c.cc.Invoke(ctx, "/service.CustomerService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	Add(context.Context, *domain.Customer) (*CustomerAddResponse, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) Add(ctx context.Context, req *domain.Customer) (*CustomerAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(domain.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CustomerService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Add(ctx, req.(*domain.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _CustomerService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/customer-service.proto",
}
